
/Users/muhsinfatih/developer/quadcopter/quadcopter/build/quadcopter.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <enableSysTick>:

void loop();


void enableSysTick() {
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; // enable
 8000188:	4b01      	ldr	r3, [pc, #4]	; (8000190 <enableSysTick+0x8>)
 800018a:	2207      	movs	r2, #7
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	4770      	bx	lr
 8000190:	e000e010 	.word	0xe000e010

08000194 <disableSysTick>:
}

void disableSysTick() {
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk; // disable
 8000194:	4b01      	ldr	r3, [pc, #4]	; (800019c <disableSysTick+0x8>)
 8000196:	2205      	movs	r2, #5
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	4770      	bx	lr
 800019c:	e000e010 	.word	0xe000e010

080001a0 <SysTick_Handler>:
}

volatile uint32_t ticks;
void SysTick_Handler() {
	++ticks;
 80001a0:	4a02      	ldr	r2, [pc, #8]	; (80001ac <SysTick_Handler+0xc>)
 80001a2:	6813      	ldr	r3, [r2, #0]
 80001a4:	3301      	adds	r3, #1
 80001a6:	6013      	str	r3, [r2, #0]
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000024 	.word	0x20000024

080001b0 <setSysTick>:
	return (ticks - offset) * interval;
}

// microsecond resolution
void setSysTick() {
	if (SysTick_Config(SystemCoreClock / 1000000)) {
 80001b0:	4b0c      	ldr	r3, [pc, #48]	; (80001e4 <setSysTick+0x34>)
 80001b2:	4a0d      	ldr	r2, [pc, #52]	; (80001e8 <setSysTick+0x38>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	fba2 2303 	umull	r2, r3, r2, r3
 80001ba:	0c9b      	lsrs	r3, r3, #18
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80001bc:	3b01      	subs	r3, #1
 80001be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001c2:	d300      	bcc.n	80001c6 <setSysTick+0x16>
		// capture error
		while(1);
 80001c4:	e7fe      	b.n	80001c4 <setSysTick+0x14>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80001c6:	4a09      	ldr	r2, [pc, #36]	; (80001ec <setSysTick+0x3c>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001c8:	4809      	ldr	r0, [pc, #36]	; (80001f0 <setSysTick+0x40>)
static uint32_t elapsedTime(uint32_t offset, timeinterval interval){
	return (ticks - offset) * interval;
}

// microsecond resolution
void setSysTick() {
 80001ca:	b410      	push	{r4}
 80001cc:	24f0      	movs	r4, #240	; 0xf0
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80001ce:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001d0:	2100      	movs	r1, #0
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80001d2:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001d6:	2307      	movs	r3, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80001d8:	6091      	str	r1, [r2, #8]
	if (SysTick_Config(SystemCoreClock / 1000000)) {
		// capture error
		while(1);
	}
}
 80001da:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001de:	6013      	str	r3, [r2, #0]
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000010 	.word	0x20000010
 80001e8:	431bde83 	.word	0x431bde83
 80001ec:	e000e010 	.word	0xe000e010
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <gpio>:



void gpio(GPIO_TypeDef* GPIOx, uint32_t pin, GPIOMode_TypeDef mode, GPIOPuPd_TypeDef PuPd) {
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	b083      	sub	sp, #12
	GPIO_InitTypeDef initStructure;
	
	initStructure.GPIO_Pin = pin;
	initStructure.GPIO_Mode = mode;
	initStructure.GPIO_OType = GPIO_OType_PP;
 80001f8:	2500      	movs	r5, #0


void gpio(GPIO_TypeDef* GPIOx, uint32_t pin, GPIOMode_TypeDef mode, GPIOPuPd_TypeDef PuPd) {
	GPIO_InitTypeDef initStructure;
	
	initStructure.GPIO_Pin = pin;
 80001fa:	9100      	str	r1, [sp, #0]
	initStructure.GPIO_Mode = mode;
	initStructure.GPIO_OType = GPIO_OType_PP;
	initStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80001fc:	2403      	movs	r4, #3
	initStructure.GPIO_PuPd = PuPd;
	GPIO_Init(GPIOx, &initStructure);
 80001fe:	4669      	mov	r1, sp

void gpio(GPIO_TypeDef* GPIOx, uint32_t pin, GPIOMode_TypeDef mode, GPIOPuPd_TypeDef PuPd) {
	GPIO_InitTypeDef initStructure;
	
	initStructure.GPIO_Pin = pin;
	initStructure.GPIO_Mode = mode;
 8000200:	f88d 2004 	strb.w	r2, [sp, #4]
	initStructure.GPIO_OType = GPIO_OType_PP;
	initStructure.GPIO_Speed = GPIO_Speed_100MHz;
	initStructure.GPIO_PuPd = PuPd;
 8000204:	f88d 3007 	strb.w	r3, [sp, #7]
void gpio(GPIO_TypeDef* GPIOx, uint32_t pin, GPIOMode_TypeDef mode, GPIOPuPd_TypeDef PuPd) {
	GPIO_InitTypeDef initStructure;
	
	initStructure.GPIO_Pin = pin;
	initStructure.GPIO_Mode = mode;
	initStructure.GPIO_OType = GPIO_OType_PP;
 8000208:	f88d 5006 	strb.w	r5, [sp, #6]
	initStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800020c:	f88d 4005 	strb.w	r4, [sp, #5]
	initStructure.GPIO_PuPd = PuPd;
	GPIO_Init(GPIOx, &initStructure);
 8000210:	f000 fd44 	bl	8000c9c <GPIO_Init>
}
 8000214:	b003      	add	sp, #12
 8000216:	bd30      	pop	{r4, r5, pc}

08000218 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler() {
 8000218:	b508      	push	{r3, lr}
	if (EXTI_GetITStatus(EXTI_Line0)) {
 800021a:	2001      	movs	r0, #1
 800021c:	f000 fc80 	bl	8000b20 <EXTI_GetITStatus>
 8000220:	b900      	cbnz	r0, 8000224 <EXTI0_IRQHandler+0xc>
 8000222:	bd08      	pop	{r3, pc}
		EXTI_ClearITPendingBit(EXTI_Line0); // Clear the flag
 8000224:	2001      	movs	r0, #1
 8000226:	f000 fc85 	bl	8000b34 <EXTI_ClearITPendingBit>
		
		GPIO_ToggleBits(GPIOD, pin14);
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <EXTI0_IRQHandler+0x20>)
 800022c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
//		delay(200);
		
	}
}
 8000230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void EXTI0_IRQHandler() {
	if (EXTI_GetITStatus(EXTI_Line0)) {
		EXTI_ClearITPendingBit(EXTI_Line0); // Clear the flag
		
		GPIO_ToggleBits(GPIOD, pin14);
 8000234:	f000 bdc8 	b.w	8000dc8 <GPIO_ToggleBits>
 8000238:	40020c00 	.word	0x40020c00

0800023c <loop>:
	while(true) loop();
	return 0;
}

bool buttonReleased = true;
void loop() {
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <Default_Handler>:
//*****************************************************************************
void Default_Handler(void) {
	// Go into an infinite loop.
	//
	while (1) {
	}
 8000240:	e7fe      	b.n	8000240 <Default_Handler>
 8000242:	bf00      	nop

08000244 <Reset_Handler>:
* Input			:
* Output		:
* Return		:
*******************************************************************************/
void Reset_Handler(void)
{
 8000244:	4668      	mov	r0, sp
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 8000246:	4a16      	ldr	r2, [pc, #88]	; (80002a0 <Reset_Handler+0x5c>)
 8000248:	4b16      	ldr	r3, [pc, #88]	; (80002a4 <Reset_Handler+0x60>)
* Input			:
* Output		:
* Return		:
*******************************************************************************/
void Reset_Handler(void)
{
 800024a:	f020 0107 	bic.w	r1, r0, #7
 800024e:	468d      	mov	sp, r1
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 8000250:	429a      	cmp	r2, r3
* Input			:
* Output		:
* Return		:
*******************************************************************************/
void Reset_Handler(void)
{
 8000252:	b501      	push	{r0, lr}
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 8000254:	d20c      	bcs.n	8000270 <Reset_Handler+0x2c>
 8000256:	43d0      	mvns	r0, r2
 8000258:	4418      	add	r0, r3
 800025a:	f020 0003 	bic.w	r0, r0, #3
 800025e:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <Reset_Handler+0x64>)
 8000260:	3004      	adds	r0, #4
 8000262:	4418      	add	r0, r3
	{
		*(pulDest++) = *(pulSrc++);
 8000264:	f853 1b04 	ldr.w	r1, [r3], #4
 8000268:	f842 1b04 	str.w	r1, [r2], #4
	//
	// Copy the data segment initializers from flash to SRAM in ROM mode
	//
#if (__RAM_MODE__==0)
	pulSrc = &__sidata;
	for(pulDest = &__data_start__; pulDest < &__data_end__; )
 800026c:	4283      	cmp	r3, r0
 800026e:	d1f9      	bne.n	8000264 <Reset_Handler+0x20>


	//
	// Zero fill the bss segment.
	//
	for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
 8000270:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <Reset_Handler+0x68>)
 8000272:	4a0f      	ldr	r2, [pc, #60]	; (80002b0 <Reset_Handler+0x6c>)
 8000274:	4293      	cmp	r3, r2
 8000276:	d20a      	bcs.n	800028e <Reset_Handler+0x4a>
 8000278:	43d9      	mvns	r1, r3
 800027a:	440a      	add	r2, r1
 800027c:	f022 0203 	bic.w	r2, r2, #3
 8000280:	3204      	adds	r2, #4
 8000282:	441a      	add	r2, r3
	{
		*(pulDest++) = 0;
 8000284:	2100      	movs	r1, #0
 8000286:	f843 1b04 	str.w	r1, [r3], #4


	//
	// Zero fill the bss segment.
	//
	for(pulDest = &__bss_start__; pulDest < &__bss_end__; )
 800028a:	4293      	cmp	r3, r2
 800028c:	d1fb      	bne.n	8000286 <Reset_Handler+0x42>
	//
	//	Call IEC60335 CPU register tests POST
	//
//	__ASM volatile ("bl _CPUregTestPOST \t\n");

	SystemInit();
 800028e:	f000 f823 	bl	80002d8 <SystemInit>

	//
	// Call the application's entry point.
	//
	main();
 8000292:	f000 fdf7 	bl	8000e84 <main>
}
 8000296:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
 800029a:	4685      	mov	sp, r0
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	20000000 	.word	0x20000000
 80002a4:	20000024 	.word	0x20000024
 80002a8:	08000f5c 	.word	0x08000f5c
 80002ac:	20000024 	.word	0x20000024
 80002b0:	20000028 	.word	0x20000028

080002b4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void NMI_Handler(void)
{
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop

080002b8 <HardFault_Handler>:
__attribute__((weak)) void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80002b8:	e7fe      	b.n	80002b8 <HardFault_Handler>
 80002ba:	bf00      	nop
__attribute__((weak)) void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80002bc:	e7fe      	b.n	80002bc <HardFault_Handler+0x4>
 80002be:	bf00      	nop
__attribute__((weak)) void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80002c0:	e7fe      	b.n	80002c0 <HardFault_Handler+0x8>
 80002c2:	bf00      	nop
__attribute__((weak)) void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80002c4:	e7fe      	b.n	80002c4 <HardFault_Handler+0xc>
 80002c6:	bf00      	nop
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void SVC_Handler(void)
{
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void DebugMon_Handler(void)
{
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void PendSV_Handler(void)
{
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
__attribute__((weak)) void SysTick_Handler(void)
{
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop

080002d8 <SystemInit>:
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002d8:	4b36      	ldr	r3, [pc, #216]	; (80003b4 <SystemInit+0xdc>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002da:	4837      	ldr	r0, [pc, #220]	; (80003b8 <SystemInit+0xe0>)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002dc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002de:	2100      	movs	r1, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002e0:	f042 0201 	orr.w	r2, r2, #1
 80002e4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002e6:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80002ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80002f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002f4:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002f6:	681a      	ldr	r2, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002f8:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80002fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000300:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000302:	9100      	str	r1, [sp, #0]
 8000304:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800030c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800030e:	461a      	mov	r2, r3
 8000310:	e003      	b.n	800031a <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000312:	9b00      	ldr	r3, [sp, #0]
 8000314:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000318:	d009      	beq.n	800032e <SystemInit+0x56>
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800031a:	6813      	ldr	r3, [r2, #0]
 800031c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000320:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8000322:	9b00      	ldr	r3, [sp, #0]
 8000324:	3301      	adds	r3, #1
 8000326:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000328:	9b01      	ldr	r3, [sp, #4]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0f1      	beq.n	8000312 <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800032e:	4b21      	ldr	r3, [pc, #132]	; (80003b4 <SystemInit+0xdc>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000336:	bf18      	it	ne
 8000338:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800033a:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 800033c:	9b01      	ldr	r3, [sp, #4]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d005      	beq.n	800034e <SystemInit+0x76>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000342:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <SystemInit+0xe4>)
 8000344:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000348:	609a      	str	r2, [r3, #8]
#endif
}
 800034a:	b002      	add	sp, #8
 800034c:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <SystemInit+0xdc>)
    PWR->CR |= PWR_CR_VOS;
 8000350:	491b      	ldr	r1, [pc, #108]	; (80003c0 <SystemInit+0xe8>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000354:	481b      	ldr	r0, [pc, #108]	; (80003c4 <SystemInit+0xec>)
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000356:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800035a:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800035c:	680a      	ldr	r2, [r1, #0]
 800035e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000362:	600a      	str	r2, [r1, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000364:	689a      	ldr	r2, [r3, #8]
 8000366:	609a      	str	r2, [r3, #8]

#if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000368:	689a      	ldr	r2, [r3, #8]
 800036a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800036e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000370:	689a      	ldr	r2, [r3, #8]
 8000372:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000376:	609a      	str	r2, [r3, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000378:	6058      	str	r0, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000380:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000382:	461a      	mov	r2, r3
 8000384:	6811      	ldr	r1, [r2, #0]
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <SystemInit+0xdc>)
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	d5fb      	bpl.n	8000384 <SystemInit+0xac>
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
#endif /* STM32F427_437x || STM32F429_439xx  */

#if defined (STM32F40_41xxx)     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800038c:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <SystemInit+0xf0>)
 800038e:	f240 7105 	movw	r1, #1797	; 0x705
 8000392:	6011      	str	r1, [r2, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000394:	689a      	ldr	r2, [r3, #8]
 8000396:	f022 0203 	bic.w	r2, r2, #3
 800039a:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	f042 0202 	orr.w	r2, r2, #2
 80003a2:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003a4:	461a      	mov	r2, r3
 80003a6:	6893      	ldr	r3, [r2, #8]
 80003a8:	f003 030c 	and.w	r3, r3, #12
 80003ac:	2b08      	cmp	r3, #8
 80003ae:	d1fa      	bne.n	80003a6 <SystemInit+0xce>
 80003b0:	e7c7      	b.n	8000342 <SystemInit+0x6a>
 80003b2:	bf00      	nop
 80003b4:	40023800 	.word	0x40023800
 80003b8:	24003010 	.word	0x24003010
 80003bc:	e000ed00 	.word	0xe000ed00
 80003c0:	40007000 	.word	0x40007000
 80003c4:	07405408 	.word	0x07405408
 80003c8:	40023c00 	.word	0x40023c00

080003cc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003cc:	4818      	ldr	r0, [pc, #96]	; (8000430 <SystemCoreClockUpdate+0x64>)
 80003ce:	6883      	ldr	r3, [r0, #8]
 80003d0:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 80003d4:	2b04      	cmp	r3, #4
 80003d6:	d028      	beq.n	800042a <SystemCoreClockUpdate+0x5e>
 80003d8:	2b08      	cmp	r3, #8
 80003da:	d009      	beq.n	80003f0 <SystemCoreClockUpdate+0x24>
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <SystemCoreClockUpdate+0x68>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003de:	4a14      	ldr	r2, [pc, #80]	; (8000430 <SystemCoreClockUpdate+0x64>)
 80003e0:	4915      	ldr	r1, [pc, #84]	; (8000438 <SystemCoreClockUpdate+0x6c>)
 80003e2:	6892      	ldr	r2, [r2, #8]
 80003e4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80003e8:	5c8a      	ldrb	r2, [r1, r2]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	610b      	str	r3, [r1, #16]
 80003ee:	4770      	bx	lr
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80003f0:	6843      	ldr	r3, [r0, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003f2:	6841      	ldr	r1, [r0, #4]
      
      if (pllsource != 0)
 80003f4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003f8:	6843      	ldr	r3, [r0, #4]
 80003fa:	bf18      	it	ne
 80003fc:	480f      	ldrne	r0, [pc, #60]	; (800043c <SystemCoreClockUpdate+0x70>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003fe:	f001 023f 	and.w	r2, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000402:	bf0c      	ite	eq
 8000404:	490b      	ldreq	r1, [pc, #44]	; (8000434 <SystemCoreClockUpdate+0x68>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000406:	fbb0 f1f2 	udivne	r1, r0, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800040a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800040e:	bf08      	it	eq
 8000410:	fbb1 f1f2 	udiveq	r1, r1, r2
 8000414:	fb01 f203 	mul.w	r2, r1, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <SystemCoreClockUpdate+0x64>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000420:	3301      	adds	r3, #1
 8000422:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllp;
 8000424:	fbb2 f3f3 	udiv	r3, r2, r3
      break;
 8000428:	e7d9      	b.n	80003de <SystemCoreClockUpdate+0x12>
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
      break;
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <SystemCoreClockUpdate+0x70>)
 800042c:	e7d7      	b.n	80003de <SystemCoreClockUpdate+0x12>
 800042e:	bf00      	nop
 8000430:	40023800 	.word	0x40023800
 8000434:	00f42400 	.word	0x00f42400
 8000438:	20000000 	.word	0x20000000
 800043c:	007a1200 	.word	0x007a1200

08000440 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000440:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000444:	4b02      	ldr	r3, [pc, #8]	; (8000450 <NVIC_PriorityGroupConfig+0x10>)
 8000446:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800044a:	60d8      	str	r0, [r3, #12]
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000454:	78c3      	ldrb	r3, [r0, #3]
 8000456:	b95b      	cbnz	r3, 8000470 <NVIC_Init+0x1c>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000458:	7803      	ldrb	r3, [r0, #0]
 800045a:	4818      	ldr	r0, [pc, #96]	; (80004bc <NVIC_Init+0x68>)
 800045c:	095a      	lsrs	r2, r3, #5
 800045e:	3220      	adds	r2, #32
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000460:	f003 031f 	and.w	r3, r3, #31
 8000464:	2101      	movs	r1, #1
 8000466:	fa01 f303 	lsl.w	r3, r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800046a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800046e:	4770      	bx	lr
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000470:	4b13      	ldr	r3, [pc, #76]	; (80004c0 <NVIC_Init+0x6c>)
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000472:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000474:	68d9      	ldr	r1, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000476:	7845      	ldrb	r5, [r0, #1]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000478:	7882      	ldrb	r2, [r0, #2]
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800047a:	7804      	ldrb	r4, [r0, #0]
 800047c:	4e0f      	ldr	r6, [pc, #60]	; (80004bc <NVIC_Init+0x68>)
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800047e:	43c9      	mvns	r1, r1
 8000480:	f3c1 2102 	ubfx	r1, r1, #8, #3
    tmppre = (0x4 - tmppriority);
 8000484:	f1c1 0704 	rsb	r7, r1, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000488:	b2ff      	uxtb	r7, r7
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 800048a:	230f      	movs	r3, #15

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800048c:	40bd      	lsls	r5, r7
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 800048e:	410b      	asrs	r3, r1

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000490:	4013      	ands	r3, r2
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000492:	b2e9      	uxtb	r1, r5
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000494:	430b      	orrs	r3, r1
        
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000496:	f104 4260 	add.w	r2, r4, #3758096384	; 0xe0000000
 800049a:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
    tmpsub = tmpsub >> tmppriority;

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
        
    tmppriority = tmppriority << 0x04;
 800049e:	011b      	lsls	r3, r3, #4
 80004a0:	b2db      	uxtb	r3, r3
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80004a2:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004a6:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004a8:	2201      	movs	r2, #1
 80004aa:	f003 011f 	and.w	r1, r3, #31
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004ae:	095b      	lsrs	r3, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004b0:	408a      	lsls	r2, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004b2:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80004b6:	bcf0      	pop	{r4, r5, r6, r7}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	e000e100 	.word	0xe000e100
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80004c4:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 80004c8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80004cc:	4b01      	ldr	r3, [pc, #4]	; (80004d4 <NVIC_SetVectorTable+0x10>)
 80004ce:	4308      	orrs	r0, r1
 80004d0:	6098      	str	r0, [r3, #8]
 80004d2:	4770      	bx	lr
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <NVIC_SystemLPConfig>:
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <NVIC_SystemLPConfig+0x14>)
 80004da:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80004dc:	b919      	cbnz	r1, 80004e6 <NVIC_SystemLPConfig+0xe>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 80004de:	ea23 0000 	bic.w	r0, r3, r0
 80004e2:	6110      	str	r0, [r2, #16]
 80004e4:	4770      	bx	lr
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 80004e6:	4318      	orrs	r0, r3
 80004e8:	6110      	str	r0, [r2, #16]
 80004ea:	4770      	bx	lr
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <SysTick_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <SysTick_CLKSourceConfig+0x14>)
 80004f2:	6813      	ldr	r3, [r2, #0]
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80004f4:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80004f6:	bf0c      	ite	eq
 80004f8:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80004fc:	f023 0304 	bicne.w	r3, r3, #4
 8000500:	6013      	str	r3, [r2, #0]
 8000502:	4770      	bx	lr
 8000504:	e000e010 	.word	0xe000e010

08000508 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <RCC_DeInit+0x40>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 800050a:	4810      	ldr	r0, [pc, #64]	; (800054c <RCC_DeInit+0x44>)
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800050c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800050e:	2100      	movs	r1, #0
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000510:	f042 0201 	orr.w	r2, r2, #1
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000514:	b430      	push	{r4, r5}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000516:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000518:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800051a:	681a      	ldr	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800051c:	4d0c      	ldr	r5, [pc, #48]	; (8000550 <RCC_DeInit+0x48>)

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800051e:	4c0d      	ldr	r4, [pc, #52]	; (8000554 <RCC_DeInit+0x4c>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000520:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000524:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8000528:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800052a:	605d      	str	r5, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800052c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000530:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800053a:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 

}
 800053c:	bc30      	pop	{r4, r5}
 
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800053e:	60d9      	str	r1, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
  RCC->DCKCFGR = 0x00000000; 
 8000540:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c

}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800
 800054c:	24003000 	.word	0x24003000
 8000550:	24003010 	.word	0x24003010
 8000554:	20003000 	.word	0x20003000

08000558 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000558:	4b02      	ldr	r3, [pc, #8]	; (8000564 <RCC_HSEConfig+0xc>)
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800055e:	7018      	strb	r0, [r3, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40023802 	.word	0x40023802

08000568 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000568:	b082      	sub	sp, #8
  __IO uint32_t startupcounter = 0;
 800056a:	2300      	movs	r3, #0

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800056c:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <RCC_WaitForHSEStartUp+0x30>)
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t startupcounter = 0;
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	e002      	b.n	8000578 <RCC_WaitForHSEStartUp+0x10>
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000572:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000576:	d008      	beq.n	800058a <RCC_WaitForHSEStartUp+0x22>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000578:	6813      	ldr	r3, [r2, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800057a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  FlagStatus hsestatus = RESET;
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    startupcounter++;
 800057e:	9b01      	ldr	r3, [sp, #4]
 8000580:	f103 0301 	add.w	r3, r3, #1
 8000584:	9301      	str	r3, [sp, #4]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000586:	9b01      	ldr	r3, [sp, #4]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000588:	d0f3      	beq.n	8000572 <RCC_WaitForHSEStartUp+0xa>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 800058a:	4b03      	ldr	r3, [pc, #12]	; (8000598 <RCC_WaitForHSEStartUp+0x30>)
 800058c:	6818      	ldr	r0, [r3, #0]
  }
  else
  {
    status = ERROR;
  }
  return (status);
 800058e:	f3c0 4040 	ubfx	r0, r0, #17, #1
}
 8000592:	b002      	add	sp, #8
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40023800 	.word	0x40023800

0800059c <RCC_AdjustHSICalibrationValue>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800059c:	4a03      	ldr	r2, [pc, #12]	; (80005ac <RCC_AdjustHSICalibrationValue+0x10>)
 800059e:	6813      	ldr	r3, [r2, #0]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80005a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80005a4:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CR = tmpreg;
 80005a8:	6010      	str	r0, [r2, #0]
 80005aa:	4770      	bx	lr
 80005ac:	40023800 	.word	0x40023800

080005b0 <RCC_HSICmd>:
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80005b0:	4b01      	ldr	r3, [pc, #4]	; (80005b8 <RCC_HSICmd+0x8>)
 80005b2:	6018      	str	r0, [r3, #0]
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	42470000 	.word	0x42470000

080005bc <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <RCC_LSEConfig+0x1c>)
 80005be:	2200      	movs	r2, #0

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80005c0:	2801      	cmp	r0, #1
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80005c2:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 80005c4:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 80005c6:	d005      	beq.n	80005d4 <RCC_LSEConfig+0x18>
 80005c8:	2804      	cmp	r0, #4
 80005ca:	d102      	bne.n	80005d2 <RCC_LSEConfig+0x16>
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
      break;
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80005cc:	2205      	movs	r2, #5
 80005ce:	701a      	strb	r2, [r3, #0]
 80005d0:	4770      	bx	lr
 80005d2:	4770      	bx	lr
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 80005d4:	7018      	strb	r0, [r3, #0]
      break;
 80005d6:	4770      	bx	lr
 80005d8:	40023870 	.word	0x40023870

080005dc <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 80005dc:	4b01      	ldr	r3, [pc, #4]	; (80005e4 <RCC_LSICmd+0x8>)
 80005de:	6018      	str	r0, [r3, #0]
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	42470e80 	.word	0x42470e80

080005e8 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 80005e8:	b430      	push	{r4, r5}
 80005ea:	9c02      	ldr	r4, [sp, #8]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80005ec:	4d06      	ldr	r5, [pc, #24]	; (8000608 <RCC_PLLConfig+0x20>)
 80005ee:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80005f2:	4301      	orrs	r1, r0
 80005f4:	085b      	lsrs	r3, r3, #1
 80005f6:	3b01      	subs	r3, #1
 80005f8:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80005fc:	ea42 4003 	orr.w	r0, r2, r3, lsl #16
 8000600:	6068      	str	r0, [r5, #4]
                 (PLLQ << 24);
}
 8000602:	bc30      	pop	{r4, r5}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <RCC_PLLCmd>:
  */
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <RCC_PLLCmd+0x8>)
 800060e:	6018      	str	r0, [r3, #0]
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	42470060 	.word	0x42470060

08000618 <RCC_PLLI2SConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 8000618:	0709      	lsls	r1, r1, #28
 800061a:	4b03      	ldr	r3, [pc, #12]	; (8000628 <RCC_PLLI2SConfig+0x10>)
 800061c:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000620:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800

0800062c <RCC_PLLI2SCmd>:
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800062c:	4b01      	ldr	r3, [pc, #4]	; (8000634 <RCC_PLLI2SCmd+0x8>)
 800062e:	6018      	str	r0, [r3, #0]
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	42470068 	.word	0x42470068

08000638 <RCC_PLLSAIConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8000638:	0712      	lsls	r2, r2, #28
 800063a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 800063e:	4b03      	ldr	r3, [pc, #12]	; (800064c <RCC_PLLSAIConfig+0x14>)
 8000640:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
 8000644:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800

08000650 <RCC_PLLSAICmd>:
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8000650:	4b01      	ldr	r3, [pc, #4]	; (8000658 <RCC_PLLSAICmd+0x8>)
 8000652:	6018      	str	r0, [r3, #0]
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	42470070 	.word	0x42470070

0800065c <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800065c:	4b01      	ldr	r3, [pc, #4]	; (8000664 <RCC_ClockSecuritySystemCmd+0x8>)
 800065e:	6018      	str	r0, [r3, #0]
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	4247004c 	.word	0x4247004c

08000668 <RCC_MCO1Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8000668:	4a03      	ldr	r2, [pc, #12]	; (8000678 <RCC_MCO1Config+0x10>)
 800066a:	6893      	ldr	r3, [r2, #8]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800066c:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8000670:	4319      	orrs	r1, r3

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8000672:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000674:	6090      	str	r0, [r2, #8]
 8000676:	4770      	bx	lr
 8000678:	40023800 	.word	0x40023800

0800067c <RCC_MCO2Config>:
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800067c:	4a03      	ldr	r2, [pc, #12]	; (800068c <RCC_MCO2Config+0x10>)
 800067e:	6893      	ldr	r3, [r2, #8]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 8000680:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000684:	4319      	orrs	r1, r3

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 8000686:	4308      	orrs	r0, r1

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8000688:	6090      	str	r0, [r2, #8]
 800068a:	4770      	bx	lr
 800068c:	40023800 	.word	0x40023800

08000690 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000690:	4a03      	ldr	r2, [pc, #12]	; (80006a0 <RCC_SYSCLKConfig+0x10>)
 8000692:	6893      	ldr	r3, [r2, #8]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000694:	f023 0303 	bic.w	r3, r3, #3

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000698:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800069a:	6090      	str	r0, [r2, #8]
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <RCC_GetSYSCLKSource>:
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 80006a4:	4b02      	ldr	r3, [pc, #8]	; (80006b0 <RCC_GetSYSCLKSource+0xc>)
 80006a6:	6898      	ldr	r0, [r3, #8]
}
 80006a8:	f000 000c 	and.w	r0, r0, #12
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800

080006b4 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80006b4:	4a03      	ldr	r2, [pc, #12]	; (80006c4 <RCC_HCLKConfig+0x10>)
 80006b6:	6893      	ldr	r3, [r2, #8]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80006b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80006bc:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80006be:	6090      	str	r0, [r2, #8]
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800

080006c8 <RCC_PCLK1Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80006c8:	4a03      	ldr	r2, [pc, #12]	; (80006d8 <RCC_PCLK1Config+0x10>)
 80006ca:	6893      	ldr	r3, [r2, #8]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80006cc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80006d0:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80006d2:	6090      	str	r0, [r2, #8]
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <RCC_PCLK2Config>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80006dc:	4a03      	ldr	r2, [pc, #12]	; (80006ec <RCC_PCLK2Config+0x10>)
 80006de:	6893      	ldr	r3, [r2, #8]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80006e0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80006e4:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80006e8:	6090      	str	r0, [r2, #8]
 80006ea:	4770      	bx	lr
 80006ec:	40023800 	.word	0x40023800

080006f0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80006f0:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006f2:	4c21      	ldr	r4, [pc, #132]	; (8000778 <RCC_GetClocksFreq+0x88>)
 80006f4:	68a3      	ldr	r3, [r4, #8]
 80006f6:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	d01b      	beq.n	8000736 <RCC_GetClocksFreq+0x46>
 80006fe:	2b08      	cmp	r3, #8
 8000700:	d01c      	beq.n	800073c <RCC_GetClocksFreq+0x4c>

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
      break;
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <RCC_GetClocksFreq+0x8c>)
 8000704:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <RCC_GetClocksFreq+0x88>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8000708:	491d      	ldr	r1, [pc, #116]	; (8000780 <RCC_GetClocksFreq+0x90>)
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800070a:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 4;
 800070c:	f3c4 1403 	ubfx	r4, r4, #4, #4
  presc = APBAHBPrescTable[tmp];
 8000710:	5d0c      	ldrb	r4, [r1, r4]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000712:	40e3      	lsrs	r3, r4
 8000714:	6043      	str	r3, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000716:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 8000718:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 800071c:	5d0c      	ldrb	r4, [r1, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800071e:	fa23 f404 	lsr.w	r4, r3, r4
 8000722:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000724:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
  presc = APBAHBPrescTable[tmp];
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
}
 8000726:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
  tmp = tmp >> 13;
 800072a:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 800072e:	5c8a      	ldrb	r2, [r1, r2]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000730:	40d3      	lsrs	r3, r2
 8000732:	60c3      	str	r3, [r0, #12]
}
 8000734:	4770      	bx	lr
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <RCC_GetClocksFreq+0x94>)
 8000738:	6003      	str	r3, [r0, #0]
      break;
 800073a:	e7e4      	b.n	8000706 <RCC_GetClocksFreq+0x16>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800073c:	6863      	ldr	r3, [r4, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800073e:	6861      	ldr	r1, [r4, #4]
      
      if (pllsource != 0)
 8000740:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000744:	6863      	ldr	r3, [r4, #4]
 8000746:	bf18      	it	ne
 8000748:	4c0e      	ldrne	r4, [pc, #56]	; (8000784 <RCC_GetClocksFreq+0x94>)

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800074a:	f001 023f 	and.w	r2, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800074e:	bf0c      	ite	eq
 8000750:	490a      	ldreq	r1, [pc, #40]	; (800077c <RCC_GetClocksFreq+0x8c>)
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      
      if (pllsource != 0)
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000752:	fbb4 f1f2 	udivne	r1, r4, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000756:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800075a:	bf08      	it	eq
 800075c:	fbb1 f1f2 	udiveq	r1, r1, r2
 8000760:	fb01 f203 	mul.w	r2, r1, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <RCC_GetClocksFreq+0x88>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800076c:	3301      	adds	r3, #1
 800076e:	005b      	lsls	r3, r3, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000770:	fbb2 f3f3 	udiv	r3, r2, r3
 8000774:	6003      	str	r3, [r0, #0]
      break;
 8000776:	e7c6      	b.n	8000706 <RCC_GetClocksFreq+0x16>
 8000778:	40023800 	.word	0x40023800
 800077c:	00f42400 	.word	0x00f42400
 8000780:	20000014 	.word	0x20000014
 8000784:	007a1200 	.word	0x007a1200

08000788 <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8000788:	f400 7340 	and.w	r3, r0, #768	; 0x300
 800078c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000790:	d109      	bne.n	80007a6 <RCC_RTCCLKConfig+0x1e>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8000792:	4908      	ldr	r1, [pc, #32]	; (80007b4 <RCC_RTCCLKConfig+0x2c>)
 8000794:	688b      	ldr	r3, [r1, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8000796:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800079a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800079e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80007a2:	4313      	orrs	r3, r2

    /* Store the new value */
    RCC->CFGR = tmpreg;
 80007a4:	608b      	str	r3, [r1, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 80007a6:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <RCC_RTCCLKConfig+0x2c>)
 80007a8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80007aa:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80007ae:	4318      	orrs	r0, r3
 80007b0:	6710      	str	r0, [r2, #112]	; 0x70
 80007b2:	4770      	bx	lr
 80007b4:	40023800 	.word	0x40023800

080007b8 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80007b8:	4b01      	ldr	r3, [pc, #4]	; (80007c0 <RCC_RTCCLKCmd+0x8>)
 80007ba:	6018      	str	r0, [r3, #0]
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	42470e3c 	.word	0x42470e3c

080007c4 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 80007c4:	4b01      	ldr	r3, [pc, #4]	; (80007cc <RCC_BackupResetCmd+0x8>)
 80007c6:	6018      	str	r0, [r3, #0]
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	42470e40 	.word	0x42470e40

080007d0 <RCC_I2SCLKConfig>:
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 80007d0:	4b01      	ldr	r3, [pc, #4]	; (80007d8 <RCC_I2SCLKConfig+0x8>)
 80007d2:	6018      	str	r0, [r3, #0]
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	4247015c 	.word	0x4247015c

080007dc <RCC_SAIPLLI2SClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <RCC_SAIPLLI2SClkDivConfig+0x14>)
 80007de:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 80007e2:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
 80007e4:	f023 031f 	bic.w	r3, r3, #31

  /* Set PLLI2SDIVQ values */
  tmpreg |= (RCC_PLLI2SDivQ - 1);
 80007e8:	4303      	orrs	r3, r0

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 80007ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007ee:	4770      	bx	lr
 80007f0:	40023800 	.word	0x40023800

080007f4 <RCC_SAIPLLSAIClkDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;
 80007f4:	4a05      	ldr	r2, [pc, #20]	; (800080c <RCC_SAIPLLSAIClkDivConfig+0x18>)
 80007f6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 80007fa:	3801      	subs	r0, #1
  assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
  
  tmpreg = RCC->DCKCFGR;

  /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
  tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
 80007fc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00

  /* Set PLLSAIDIVQ values */
  tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
 8000800:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000804:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <RCC_SAIBlockACLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <RCC_SAIBlockACLKConfig+0x14>)
 8000812:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
 8000816:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000

  /* Set SAI Block A source selection value */
  tmpreg |= RCC_SAIBlockACLKSource;
 800081a:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800081c:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <RCC_SAIBlockBCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
  
  tmpreg = RCC->DCKCFGR;
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <RCC_SAIBlockBCLKConfig+0x14>)
 800082a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
  tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
 800082e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000

  /* Set SAI Block B source selection value */
  tmpreg |= RCC_SAIBlockBCLKSource;
 8000832:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000834:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <RCC_LTDCCLKDivConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <RCC_LTDCCLKDivConfig+0x14>)
 8000842:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8000846:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 800084a:	4318      	orrs	r0, r3

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 800084c:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <RCC_TIMCLKPresConfig>:
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 8000858:	4b01      	ldr	r3, [pc, #4]	; (8000860 <RCC_TIMCLKPresConfig+0x8>)
 800085a:	6018      	str	r0, [r3, #0]
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	424711e0 	.word	0x424711e0

08000864 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <RCC_AHB1PeriphClockCmd+0x14>)
 8000866:	6b13      	ldr	r3, [r2, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000868:	b919      	cbnz	r1, 8000872 <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800086a:	ea23 0000 	bic.w	r0, r3, r0
 800086e:	6310      	str	r0, [r2, #48]	; 0x30
 8000870:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000872:	4318      	orrs	r0, r3
 8000874:	6310      	str	r0, [r2, #48]	; 0x30
 8000876:	4770      	bx	lr
 8000878:	40023800 	.word	0x40023800

0800087c <RCC_AHB2PeriphClockCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <RCC_AHB2PeriphClockCmd+0x14>)
 800087e:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000880:	b919      	cbnz	r1, 800088a <RCC_AHB2PeriphClockCmd+0xe>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8000882:	ea23 0000 	bic.w	r0, r3, r0
 8000886:	6350      	str	r0, [r2, #52]	; 0x34
 8000888:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800088a:	4318      	orrs	r0, r3
 800088c:	6350      	str	r0, [r2, #52]	; 0x34
 800088e:	4770      	bx	lr
 8000890:	40023800 	.word	0x40023800

08000894 <RCC_AHB3PeriphClockCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <RCC_AHB3PeriphClockCmd+0x14>)
 8000896:	6b93      	ldr	r3, [r2, #56]	; 0x38
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000898:	b919      	cbnz	r1, 80008a2 <RCC_AHB3PeriphClockCmd+0xe>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800089a:	ea23 0000 	bic.w	r0, r3, r0
 800089e:	6390      	str	r0, [r2, #56]	; 0x38
 80008a0:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 80008a2:	4318      	orrs	r0, r3
 80008a4:	6390      	str	r0, [r2, #56]	; 0x38
 80008a6:	4770      	bx	lr
 80008a8:	40023800 	.word	0x40023800

080008ac <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <RCC_APB1PeriphClockCmd+0x14>)
 80008ae:	6c13      	ldr	r3, [r2, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008b0:	b919      	cbnz	r1, 80008ba <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80008b2:	ea23 0000 	bic.w	r0, r3, r0
 80008b6:	6410      	str	r0, [r2, #64]	; 0x40
 80008b8:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80008ba:	4318      	orrs	r0, r3
 80008bc:	6410      	str	r0, [r2, #64]	; 0x40
 80008be:	4770      	bx	lr
 80008c0:	40023800 	.word	0x40023800

080008c4 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <RCC_APB2PeriphClockCmd+0x14>)
 80008c6:	6c53      	ldr	r3, [r2, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008c8:	b919      	cbnz	r1, 80008d2 <RCC_APB2PeriphClockCmd+0xe>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008ca:	ea23 0000 	bic.w	r0, r3, r0
 80008ce:	6450      	str	r0, [r2, #68]	; 0x44
 80008d0:	4770      	bx	lr
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008d2:	4318      	orrs	r0, r3
 80008d4:	6450      	str	r0, [r2, #68]	; 0x44
 80008d6:	4770      	bx	lr
 80008d8:	40023800 	.word	0x40023800

080008dc <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <RCC_AHB1PeriphResetCmd+0x14>)
 80008de:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008e0:	b919      	cbnz	r1, 80008ea <RCC_AHB1PeriphResetCmd+0xe>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 80008e2:	ea23 0000 	bic.w	r0, r3, r0
 80008e6:	6110      	str	r0, [r2, #16]
 80008e8:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 80008ea:	4318      	orrs	r0, r3
 80008ec:	6110      	str	r0, [r2, #16]
 80008ee:	4770      	bx	lr
 80008f0:	40023800 	.word	0x40023800

080008f4 <RCC_AHB2PeriphResetCmd>:
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <RCC_AHB2PeriphResetCmd+0x14>)
 80008f6:	6953      	ldr	r3, [r2, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008f8:	b919      	cbnz	r1, 8000902 <RCC_AHB2PeriphResetCmd+0xe>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 80008fa:	ea23 0000 	bic.w	r0, r3, r0
 80008fe:	6150      	str	r0, [r2, #20]
 8000900:	4770      	bx	lr
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8000902:	4318      	orrs	r0, r3
 8000904:	6150      	str	r0, [r2, #20]
 8000906:	4770      	bx	lr
 8000908:	40023800 	.word	0x40023800

0800090c <RCC_AHB3PeriphResetCmd>:
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <RCC_AHB3PeriphResetCmd+0x14>)
 800090e:	6993      	ldr	r3, [r2, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000910:	b919      	cbnz	r1, 800091a <RCC_AHB3PeriphResetCmd+0xe>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8000912:	ea23 0000 	bic.w	r0, r3, r0
 8000916:	6190      	str	r0, [r2, #24]
 8000918:	4770      	bx	lr
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800091a:	4318      	orrs	r0, r3
 800091c:	6190      	str	r0, [r2, #24]
 800091e:	4770      	bx	lr
 8000920:	40023800 	.word	0x40023800

08000924 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <RCC_APB1PeriphResetCmd+0x14>)
 8000926:	6a13      	ldr	r3, [r2, #32]
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000928:	b919      	cbnz	r1, 8000932 <RCC_APB1PeriphResetCmd+0xe>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800092a:	ea23 0000 	bic.w	r0, r3, r0
 800092e:	6210      	str	r0, [r2, #32]
 8000930:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000932:	4318      	orrs	r0, r3
 8000934:	6210      	str	r0, [r2, #32]
 8000936:	4770      	bx	lr
 8000938:	40023800 	.word	0x40023800

0800093c <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800093c:	4a04      	ldr	r2, [pc, #16]	; (8000950 <RCC_APB2PeriphResetCmd+0x14>)
 800093e:	6a53      	ldr	r3, [r2, #36]	; 0x24
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000940:	b919      	cbnz	r1, 800094a <RCC_APB2PeriphResetCmd+0xe>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000942:	ea23 0000 	bic.w	r0, r3, r0
 8000946:	6250      	str	r0, [r2, #36]	; 0x24
 8000948:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800094a:	4318      	orrs	r0, r3
 800094c:	6250      	str	r0, [r2, #36]	; 0x24
 800094e:	4770      	bx	lr
 8000950:	40023800 	.word	0x40023800

08000954 <RCC_AHB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <RCC_AHB1PeriphClockLPModeCmd+0x14>)
 8000956:	6d13      	ldr	r3, [r2, #80]	; 0x50
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000958:	b919      	cbnz	r1, 8000962 <RCC_AHB1PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800095a:	ea23 0000 	bic.w	r0, r3, r0
 800095e:	6510      	str	r0, [r2, #80]	; 0x50
 8000960:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8000962:	4318      	orrs	r0, r3
 8000964:	6510      	str	r0, [r2, #80]	; 0x50
 8000966:	4770      	bx	lr
 8000968:	40023800 	.word	0x40023800

0800096c <RCC_AHB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <RCC_AHB2PeriphClockLPModeCmd+0x14>)
 800096e:	6d53      	ldr	r3, [r2, #84]	; 0x54
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000970:	b919      	cbnz	r1, 800097a <RCC_AHB2PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8000972:	ea23 0000 	bic.w	r0, r3, r0
 8000976:	6550      	str	r0, [r2, #84]	; 0x54
 8000978:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800097a:	4318      	orrs	r0, r3
 800097c:	6550      	str	r0, [r2, #84]	; 0x54
 800097e:	4770      	bx	lr
 8000980:	40023800 	.word	0x40023800

08000984 <RCC_AHB3PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <RCC_AHB3PeriphClockLPModeCmd+0x14>)
 8000986:	6d93      	ldr	r3, [r2, #88]	; 0x58
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000988:	b919      	cbnz	r1, 8000992 <RCC_AHB3PeriphClockLPModeCmd+0xe>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800098a:	ea23 0000 	bic.w	r0, r3, r0
 800098e:	6590      	str	r0, [r2, #88]	; 0x58
 8000990:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8000992:	4318      	orrs	r0, r3
 8000994:	6590      	str	r0, [r2, #88]	; 0x58
 8000996:	4770      	bx	lr
 8000998:	40023800 	.word	0x40023800

0800099c <RCC_APB1PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <RCC_APB1PeriphClockLPModeCmd+0x14>)
 800099e:	6e13      	ldr	r3, [r2, #96]	; 0x60
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009a0:	b919      	cbnz	r1, 80009aa <RCC_APB1PeriphClockLPModeCmd+0xe>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 80009a2:	ea23 0000 	bic.w	r0, r3, r0
 80009a6:	6610      	str	r0, [r2, #96]	; 0x60
 80009a8:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 80009aa:	4318      	orrs	r0, r3
 80009ac:	6610      	str	r0, [r2, #96]	; 0x60
 80009ae:	4770      	bx	lr
 80009b0:	40023800 	.word	0x40023800

080009b4 <RCC_APB2PeriphClockLPModeCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <RCC_APB2PeriphClockLPModeCmd+0x14>)
 80009b6:	6e53      	ldr	r3, [r2, #100]	; 0x64
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009b8:	b919      	cbnz	r1, 80009c2 <RCC_APB2PeriphClockLPModeCmd+0xe>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 80009ba:	ea23 0000 	bic.w	r0, r3, r0
 80009be:	6650      	str	r0, [r2, #100]	; 0x64
 80009c0:	4770      	bx	lr
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 80009c2:	4318      	orrs	r0, r3
 80009c4:	6650      	str	r0, [r2, #100]	; 0x64
 80009c6:	4770      	bx	lr
 80009c8:	40023800 	.word	0x40023800

080009cc <RCC_ITConfig>:
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <RCC_ITConfig+0x14>)
 80009ce:	7813      	ldrb	r3, [r2, #0]
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80009d0:	b919      	cbnz	r1, 80009da <RCC_ITConfig+0xe>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 80009d2:	ea23 0000 	bic.w	r0, r3, r0
 80009d6:	7010      	strb	r0, [r2, #0]
 80009d8:	4770      	bx	lr
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 80009da:	4318      	orrs	r0, r3
 80009dc:	7010      	strb	r0, [r2, #0]
 80009de:	4770      	bx	lr
 80009e0:	4002380d 	.word	0x4002380d

080009e4 <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80009e4:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d00b      	beq.n	8000a02 <RCC_GetFlagStatus+0x1e>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80009ea:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <RCC_GetFlagStatus+0x30>)
 80009ee:	bf0c      	ite	eq
 80009f0:	6f1a      	ldreq	r2, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80009f2:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80009f4:	f000 031f 	and.w	r3, r0, #31
 80009f8:	fa22 f003 	lsr.w	r0, r2, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 80009fc:	f000 0001 	and.w	r0, r0, #1
 8000a00:	4770      	bx	lr

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
  if (tmp == 1)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <RCC_GetFlagStatus+0x30>)
 8000a04:	681a      	ldr	r2, [r3, #0]
    statusreg = RCC->CSR;
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000a06:	f000 031f 	and.w	r3, r0, #31
 8000a0a:	fa22 f003 	lsr.w	r0, r2, r3
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8000a0e:	f000 0001 	and.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	40023800 	.word	0x40023800

08000a18 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000a18:	4a02      	ldr	r2, [pc, #8]	; (8000a24 <RCC_ClearFlag+0xc>)
 8000a1a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000a1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a20:	6753      	str	r3, [r2, #116]	; 0x74
 8000a22:	4770      	bx	lr
 8000a24:	40023800 	.word	0x40023800

08000a28 <RCC_GetITStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <RCC_GetITStatus+0x10>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
}
 8000a2e:	bf14      	ite	ne
 8000a30:	2001      	movne	r0, #1
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8000a3c:	4b01      	ldr	r3, [pc, #4]	; (8000a44 <RCC_ClearITPendingBit+0x8>)
 8000a3e:	7018      	strb	r0, [r3, #0]
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	4002380e 	.word	0x4002380e

08000a48 <EXTI_DeInit>:
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <EXTI_DeInit+0x14>)
  EXTI->EMR = 0x00000000;
  EXTI->RTSR = 0x00000000;
  EXTI->FTSR = 0x00000000;
  EXTI->PR = 0x007FFFFF;
 8000a4a:	4905      	ldr	r1, [pc, #20]	; (8000a60 <EXTI_DeInit+0x18>)
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
  EXTI->IMR = 0x00000000;
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8000a50:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8000a52:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8000a54:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8000a56:	6159      	str	r1, [r3, #20]
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40013c00 	.word	0x40013c00
 8000a60:	007fffff 	.word	0x007fffff

08000a64 <EXTI_Init>:
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000a64:	7983      	ldrb	r3, [r0, #6]
 8000a66:	b333      	cbz	r3, 8000ab6 <EXTI_Init+0x52>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <EXTI_Init+0x78>)
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000a6a:	7902      	ldrb	r2, [r0, #4]
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000a6c:	7941      	ldrb	r1, [r0, #5]
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000a6e:	b4f0      	push	{r4, r5, r6, r7}
  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a70:	6804      	ldr	r4, [r0, #0]
 8000a72:	681e      	ldr	r6, [r3, #0]
 8000a74:	43e7      	mvns	r7, r4
 8000a76:	403e      	ands	r6, r7
 8000a78:	601e      	str	r6, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a7a:	685d      	ldr	r5, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000a7c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000a80:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a84:	403d      	ands	r5, r7
 8000a86:	605d      	str	r5, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000a88:	6815      	ldr	r5, [r2, #0]
 8000a8a:	432c      	orrs	r4, r5
 8000a8c:	6014      	str	r4, [r2, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000a8e:	6802      	ldr	r2, [r0, #0]
 8000a90:	689c      	ldr	r4, [r3, #8]
 8000a92:	43d5      	mvns	r5, r2
 8000a94:	402c      	ands	r4, r5
 8000a96:	609c      	str	r4, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000a98:	68d8      	ldr	r0, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000a9a:	2910      	cmp	r1, #16

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000a9c:	ea00 0005 	and.w	r0, r0, r5
 8000aa0:	60d8      	str	r0, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000aa2:	d013      	beq.n	8000acc <EXTI_Init+0x68>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000aa4:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8000aa8:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000aac:	bcf0      	pop	{r4, r5, r6, r7}
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000aae:	6819      	ldr	r1, [r3, #0]
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000ab4:	4770      	bx	lr
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000ab6:	7903      	ldrb	r3, [r0, #4]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000ab8:	6801      	ldr	r1, [r0, #0]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000aba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000abe:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	ea22 0201 	bic.w	r2, r2, r1
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	4770      	bx	lr
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000acc:	6899      	ldr	r1, [r3, #8]
 8000ace:	4311      	orrs	r1, r2
 8000ad0:	6099      	str	r1, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000ad2:	68d9      	ldr	r1, [r3, #12]
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	60da      	str	r2, [r3, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000ad8:	bcf0      	pop	{r4, r5, r6, r7}
 8000ada:	4770      	bx	lr
 8000adc:	40013c00 	.word	0x40013c00

08000ae0 <EXTI_StructInit>:
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000ae0:	2300      	movs	r3, #0
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	7142      	strb	r2, [r0, #5]
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8000ae6:	6003      	str	r3, [r0, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8000ae8:	7103      	strb	r3, [r0, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8000aea:	7183      	strb	r3, [r0, #6]
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <EXTI_GenerateSWInterrupt>:
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8000af0:	4a02      	ldr	r2, [pc, #8]	; (8000afc <EXTI_GenerateSWInterrupt+0xc>)
 8000af2:	6913      	ldr	r3, [r2, #16]
 8000af4:	4318      	orrs	r0, r3
 8000af6:	6110      	str	r0, [r2, #16]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40013c00 	.word	0x40013c00

08000b00 <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <EXTI_GetFlagStatus+0x10>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8000b06:	bf14      	ite	ne
 8000b08:	2001      	movne	r0, #1
 8000b0a:	2000      	moveq	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40013c00 	.word	0x40013c00

08000b14 <EXTI_ClearFlag>:
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000b14:	4b01      	ldr	r3, [pc, #4]	; (8000b1c <EXTI_ClearFlag+0x8>)
 8000b16:	6158      	str	r0, [r3, #20]
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40013c00 	.word	0x40013c00

08000b20 <EXTI_GetITStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <EXTI_GetITStatus+0x10>)
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	4218      	tst	r0, r3
  {
    bitstatus = RESET;
  }
  return bitstatus;
  
}
 8000b26:	bf14      	ite	ne
 8000b28:	2001      	movne	r0, #1
 8000b2a:	2000      	moveq	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40013c00 	.word	0x40013c00

08000b34 <EXTI_ClearITPendingBit>:
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000b34:	4b01      	ldr	r3, [pc, #4]	; (8000b3c <EXTI_ClearITPendingBit+0x8>)
 8000b36:	6158      	str	r0, [r3, #20]
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40013c00 	.word	0x40013c00

08000b40 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000b40:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8000b42:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <GPIO_DeInit+0x130>)
 8000b44:	4298      	cmp	r0, r3
 8000b46:	d02a      	beq.n	8000b9e <GPIO_DeInit+0x5e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8000b48:	4b4a      	ldr	r3, [pc, #296]	; (8000c74 <GPIO_DeInit+0x134>)
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d031      	beq.n	8000bb2 <GPIO_DeInit+0x72>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000b4e:	4b4a      	ldr	r3, [pc, #296]	; (8000c78 <GPIO_DeInit+0x138>)
 8000b50:	4298      	cmp	r0, r3
 8000b52:	d038      	beq.n	8000bc6 <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 8000b54:	4b49      	ldr	r3, [pc, #292]	; (8000c7c <GPIO_DeInit+0x13c>)
 8000b56:	4298      	cmp	r0, r3
 8000b58:	d03f      	beq.n	8000bda <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8000b5a:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <GPIO_DeInit+0x140>)
 8000b5c:	4298      	cmp	r0, r3
 8000b5e:	d046      	beq.n	8000bee <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8000b60:	4b48      	ldr	r3, [pc, #288]	; (8000c84 <GPIO_DeInit+0x144>)
 8000b62:	4298      	cmp	r0, r3
 8000b64:	d04d      	beq.n	8000c02 <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 8000b66:	4b48      	ldr	r3, [pc, #288]	; (8000c88 <GPIO_DeInit+0x148>)
 8000b68:	4298      	cmp	r0, r3
 8000b6a:	d054      	beq.n	8000c16 <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8000b6c:	4b47      	ldr	r3, [pc, #284]	; (8000c8c <GPIO_DeInit+0x14c>)
 8000b6e:	4298      	cmp	r0, r3
 8000b70:	d05b      	beq.n	8000c2a <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 8000b72:	4b47      	ldr	r3, [pc, #284]	; (8000c90 <GPIO_DeInit+0x150>)
 8000b74:	4298      	cmp	r0, r3
 8000b76:	d062      	beq.n	8000c3e <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 8000b78:	4b46      	ldr	r3, [pc, #280]	; (8000c94 <GPIO_DeInit+0x154>)
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d06b      	beq.n	8000c56 <GPIO_DeInit+0x116>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 8000b7e:	4b46      	ldr	r3, [pc, #280]	; (8000c98 <GPIO_DeInit+0x158>)
 8000b80:	4298      	cmp	r0, r3
 8000b82:	d000      	beq.n	8000b86 <GPIO_DeInit+0x46>
 8000b84:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 8000b86:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	f7ff fea6 	bl	80008dc <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 8000b90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b94:	2100      	movs	r1, #0
    }
  }
}
 8000b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 8000b9a:	f7ff be9f 	b.w	80008dc <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	4601      	mov	r1, r0
 8000ba2:	f7ff fe9b 	bl	80008dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8000bae:	f7ff be95 	b.w	80008dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	f7ff fe91 	bl	80008dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000bba:	2002      	movs	r0, #2
 8000bbc:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8000bc2:	f7ff be8b 	b.w	80008dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000bc6:	2004      	movs	r0, #4
 8000bc8:	2101      	movs	r1, #1
 8000bca:	f7ff fe87 	bl	80008dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000bce:	2004      	movs	r0, #4
 8000bd0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000bd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8000bd6:	f7ff be81 	b.w	80008dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000bda:	2008      	movs	r0, #8
 8000bdc:	2101      	movs	r1, #1
 8000bde:	f7ff fe7d 	bl	80008dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000be2:	2008      	movs	r0, #8
 8000be4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000be6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8000bea:	f7ff be77 	b.w	80008dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000bee:	2010      	movs	r0, #16
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	f7ff fe73 	bl	80008dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000bf6:	2010      	movs	r0, #16
 8000bf8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000bfe:	f7ff be6d 	b.w	80008dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000c02:	2020      	movs	r0, #32
 8000c04:	2101      	movs	r1, #1
 8000c06:	f7ff fe69 	bl	80008dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000c0a:	2020      	movs	r0, #32
 8000c0c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000c0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000c12:	f7ff be63 	b.w	80008dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000c16:	2040      	movs	r0, #64	; 0x40
 8000c18:	2101      	movs	r1, #1
 8000c1a:	f7ff fe5f 	bl	80008dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000c1e:	2040      	movs	r0, #64	; 0x40
 8000c20:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000c22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000c26:	f7ff be59 	b.w	80008dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000c2a:	2080      	movs	r0, #128	; 0x80
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	f7ff fe55 	bl	80008dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000c32:	2080      	movs	r0, #128	; 0x80
 8000c34:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000c3a:	f7ff be4f 	b.w	80008dc <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000c3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c42:	2101      	movs	r1, #1
 8000c44:	f7ff fe4a 	bl	80008dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000c48:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c4c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000c4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000c52:	f7ff be43 	b.w	80008dc <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 8000c56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	f7ff fe3e 	bl	80008dc <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000c60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c64:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000c6a:	f7ff be37 	b.w	80008dc <RCC_AHB1PeriphResetCmd>
 8000c6e:	bf00      	nop
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020c00 	.word	0x40020c00
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40021400 	.word	0x40021400
 8000c88:	40021800 	.word	0x40021800
 8000c8c:	40021c00 	.word	0x40021c00
 8000c90:	40022000 	.word	0x40022000
 8000c94:	40022400 	.word	0x40022400
 8000c98:	40022800 	.word	0x40022800

08000c9c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	f8d1 e000 	ldr.w	lr, [r1]
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000ca8:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000caa:	f04f 0c03 	mov.w	ip, #3
 8000cae:	e004      	b.n	8000cba <GPIO_Init+0x1e>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	2b10      	cmp	r3, #16
 8000cb4:	f102 0202 	add.w	r2, r2, #2
 8000cb8:	d028      	beq.n	8000d0c <GPIO_Init+0x70>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000cba:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000cbe:	ea04 050e 	and.w	r5, r4, lr

    if (currentpin == pos)
 8000cc2:	42a5      	cmp	r5, r4
 8000cc4:	d1f4      	bne.n	8000cb0 <GPIO_Init+0x14>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000cc6:	f8d0 8000 	ldr.w	r8, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000cca:	790e      	ldrb	r6, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ccc:	fa0c f402 	lsl.w	r4, ip, r2
 8000cd0:	43e4      	mvns	r4, r4
 8000cd2:	ea04 0808 	and.w	r8, r4, r8
 8000cd6:	f8c0 8000 	str.w	r8, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000cda:	f8d0 8000 	ldr.w	r8, [r0]
 8000cde:	fa06 f902 	lsl.w	r9, r6, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000ce2:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ce4:	ea49 0808 	orr.w	r8, r9, r8

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000ce8:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000cea:	f8c0 8000 	str.w	r8, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000cee:	d90f      	bls.n	8000d10 <GPIO_Init+0x74>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000cf0:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000cf2:	79ce      	ldrb	r6, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000cf4:	402c      	ands	r4, r5
 8000cf6:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000cf8:	68c5      	ldr	r5, [r0, #12]
 8000cfa:	fa06 f402 	lsl.w	r4, r6, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000cfe:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000d00:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d02:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000d04:	60c4      	str	r4, [r0, #12]
 8000d06:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d0a:	d1d6      	bne.n	8000cba <GPIO_Init+0x1e>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d10:	f8d0 9008 	ldr.w	r9, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d14:	f891 8005 	ldrb.w	r8, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d18:	798e      	ldrb	r6, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d1a:	ea04 0909 	and.w	r9, r4, r9
 8000d1e:	f8c0 9008 	str.w	r9, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d22:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8000d26:	fa08 f802 	lsl.w	r8, r8, r2
 8000d2a:	ea48 0809 	orr.w	r8, r8, r9
 8000d2e:	f8c0 8008 	str.w	r8, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000d32:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8000d36:	ea28 0505 	bic.w	r5, r8, r5
 8000d3a:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d3c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8000d40:	fa06 f503 	lsl.w	r5, r6, r3
 8000d44:	b2ad      	uxth	r5, r5
 8000d46:	ea45 0508 	orr.w	r5, r5, r8
 8000d4a:	6045      	str	r5, [r0, #4]
 8000d4c:	e7d0      	b.n	8000cf0 <GPIO_Init+0x54>
 8000d4e:	bf00      	nop

08000d50 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000d50:	2300      	movs	r3, #0
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d56:	6002      	str	r2, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000d58:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8000d5a:	7143      	strb	r3, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000d5c:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d5e:	71c3      	strb	r3, [r0, #7]
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d64:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 8000d66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6a:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000d6c:	9b01      	ldr	r3, [sp, #4]
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000d72:	9b01      	ldr	r3, [sp, #4]
 8000d74:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8000d76:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000d78:	9b01      	ldr	r3, [sp, #4]
 8000d7a:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000d7c:	69c3      	ldr	r3, [r0, #28]
 8000d7e:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8000d80:	69c3      	ldr	r3, [r0, #28]
 8000d82:	9301      	str	r3, [sp, #4]
}
 8000d84:	b002      	add	sp, #8
 8000d86:	4770      	bx	lr

08000d88 <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000d88:	6903      	ldr	r3, [r0, #16]
 8000d8a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000d8c:	bf14      	ite	ne
 8000d8e:	2001      	movne	r0, #1
 8000d90:	2000      	moveq	r0, #0
 8000d92:	4770      	bx	lr

08000d94 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000d94:	6900      	ldr	r0, [r0, #16]
}
 8000d96:	b280      	uxth	r0, r0
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000d9c:	6943      	ldr	r3, [r0, #20]
 8000d9e:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8000da0:	bf14      	ite	ne
 8000da2:	2001      	movne	r0, #1
 8000da4:	2000      	moveq	r0, #0
 8000da6:	4770      	bx	lr

08000da8 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000da8:	6940      	ldr	r0, [r0, #20]
}
 8000daa:	b280      	uxth	r0, r0
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000db0:	8301      	strh	r1, [r0, #24]
 8000db2:	4770      	bx	lr

08000db4 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000db4:	8341      	strh	r1, [r0, #26]
 8000db6:	4770      	bx	lr

08000db8 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000db8:	b90a      	cbnz	r2, 8000dbe <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000dba:	8341      	strh	r1, [r0, #26]
 8000dbc:	4770      	bx	lr
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000dbe:	8301      	strh	r1, [r0, #24]
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000dc4:	6141      	str	r1, [r0, #20]
 8000dc6:	4770      	bx	lr

08000dc8 <GPIO_ToggleBits>:
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000dc8:	6943      	ldr	r3, [r0, #20]
 8000dca:	4059      	eors	r1, r3
 8000dcc:	6141      	str	r1, [r0, #20]
 8000dce:	4770      	bx	lr

08000dd0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000dd0:	08cb      	lsrs	r3, r1, #3
 8000dd2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000dd6:	f001 0107 	and.w	r1, r1, #7
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000dda:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000ddc:	0089      	lsls	r1, r1, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000dde:	6a04      	ldr	r4, [r0, #32]
 8000de0:	230f      	movs	r3, #15
 8000de2:	408b      	lsls	r3, r1
 8000de4:	ea24 0303 	bic.w	r3, r4, r3
 8000de8:	6203      	str	r3, [r0, #32]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000dea:	6a03      	ldr	r3, [r0, #32]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
}
 8000dec:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000df0:	408a      	lsls	r2, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000df2:	4313      	orrs	r3, r2
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000df4:	6203      	str	r3, [r0, #32]
}
 8000df6:	4770      	bx	lr

08000df8 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8000df8:	b508      	push	{r3, lr}
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000dfa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dfe:	2101      	movs	r1, #1
 8000e00:	f7ff fd9c 	bl	800093c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8000e04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e08:	2100      	movs	r1, #0
}
 8000e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  * @retval None
  */
void SYSCFG_DeInit(void)
{
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8000e0e:	f7ff bd95 	b.w	800093c <RCC_APB2PeriphResetCmd>
 8000e12:	bf00      	nop

08000e14 <SYSCFG_MemoryRemapConfig>:
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8000e14:	4b01      	ldr	r3, [pc, #4]	; (8000e1c <SYSCFG_MemoryRemapConfig+0x8>)
 8000e16:	6018      	str	r0, [r3, #0]
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40013800 	.word	0x40013800

08000e20 <SYSCFG_MemorySwappingBank>:
void SYSCFG_MemorySwappingBank(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) UFB_MODE_BB = (uint32_t)NewState;
 8000e20:	4b01      	ldr	r3, [pc, #4]	; (8000e28 <SYSCFG_MemorySwappingBank+0x8>)
 8000e22:	6018      	str	r0, [r3, #0]
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	42270020 	.word	0x42270020

08000e2c <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000e2c:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8000e30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e34:	f503 339c 	add.w	r3, r3, #79872	; 0x13800

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000e38:	f001 0103 	and.w	r1, r1, #3
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000e3c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000e3e:	0089      	lsls	r1, r1, #2
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000e40:	689c      	ldr	r4, [r3, #8]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000e42:	220f      	movs	r2, #15
 8000e44:	408a      	lsls	r2, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000e46:	ea24 0202 	bic.w	r2, r4, r2
 8000e4a:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000e4c:	689a      	ldr	r2, [r3, #8]
}
 8000e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000e52:	4088      	lsls	r0, r1
 8000e54:	4302      	orrs	r2, r0
 8000e56:	609a      	str	r2, [r3, #8]
}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <SYSCFG_ETH_MediaInterfaceConfig>:
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8000e5c:	4b01      	ldr	r3, [pc, #4]	; (8000e64 <SYSCFG_ETH_MediaInterfaceConfig+0x8>)
 8000e5e:	6018      	str	r0, [r3, #0]
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	422700dc 	.word	0x422700dc

08000e68 <SYSCFG_CompensationCellCmd>:
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8000e68:	4b01      	ldr	r3, [pc, #4]	; (8000e70 <SYSCFG_CompensationCellCmd+0x8>)
 8000e6a:	6018      	str	r0, [r3, #0]
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	42270400 	.word	0x42270400

08000e74 <SYSCFG_GetCompensationCellStatus>:
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
  FlagStatus bitstatus = RESET;
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 8000e74:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <SYSCFG_GetCompensationCellStatus+0xc>)
 8000e76:	6a18      	ldr	r0, [r3, #32]
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8000e78:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40013800 	.word	0x40013800

08000e84 <main>:
	return (ticks - offset) * interval;
}

// microsecond resolution
void setSysTick() {
	if (SysTick_Config(SystemCoreClock / 1000000)) {
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <main+0xc0>)
 8000e86:	4a30      	ldr	r2, [pc, #192]	; (8000f48 <main+0xc4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8e:	0c9b      	lsrs	r3, r3, #18
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000e90:	3b01      	subs	r3, #1
 8000e92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e96:	d300      	bcc.n	8000e9a <main+0x16>
 8000e98:	e7fe      	b.n	8000e98 <main+0x14>
//		delay(200);
		
	}
}

int main() {
 8000e9a:	b570      	push	{r4, r5, r6, lr}

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000e9c:	4a2b      	ldr	r2, [pc, #172]	; (8000f4c <main+0xc8>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000e9e:	492c      	ldr	r1, [pc, #176]	; (8000f50 <main+0xcc>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000ea2:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea4:	2307      	movs	r3, #7
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000ea6:	20f0      	movs	r0, #240	; 0xf0
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000eae:	6094      	str	r4, [r2, #8]
	setSysTick();

	// enable GPIOx clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000eb0:	2008      	movs	r0, #8
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	f7ff fcd5 	bl	8000864 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000eba:	2001      	movs	r0, #1
 8000ebc:	4601      	mov	r1, r0
 8000ebe:	f7ff fcd1 	bl	8000864 <RCC_AHB1PeriphClockCmd>

void gpio(GPIO_TypeDef* GPIOx, uint32_t pin, GPIOMode_TypeDef mode, GPIOPuPd_TypeDef PuPd) {
	GPIO_InitTypeDef initStructure;
	
	initStructure.GPIO_Pin = pin;
	initStructure.GPIO_Mode = mode;
 8000ec2:	2501      	movs	r5, #1


void gpio(GPIO_TypeDef* GPIOx, uint32_t pin, GPIOMode_TypeDef mode, GPIOPuPd_TypeDef PuPd) {
	GPIO_InitTypeDef initStructure;
	
	initStructure.GPIO_Pin = pin;
 8000ec4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
	initStructure.GPIO_Mode = mode;
	initStructure.GPIO_OType = GPIO_OType_PP;
	initStructure.GPIO_Speed = GPIO_Speed_100MHz;
	initStructure.GPIO_PuPd = PuPd;
	GPIO_Init(GPIOx, &initStructure);
 8000ec8:	a902      	add	r1, sp, #8
	GPIO_InitTypeDef initStructure;
	
	initStructure.GPIO_Pin = pin;
	initStructure.GPIO_Mode = mode;
	initStructure.GPIO_OType = GPIO_OType_PP;
	initStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000eca:	2603      	movs	r6, #3
	initStructure.GPIO_PuPd = PuPd;
	GPIO_Init(GPIOx, &initStructure);
 8000ecc:	4821      	ldr	r0, [pc, #132]	; (8000f54 <main+0xd0>)


void gpio(GPIO_TypeDef* GPIOx, uint32_t pin, GPIOMode_TypeDef mode, GPIOPuPd_TypeDef PuPd) {
	GPIO_InitTypeDef initStructure;
	
	initStructure.GPIO_Pin = pin;
 8000ece:	9302      	str	r3, [sp, #8]
	initStructure.GPIO_Mode = mode;
	initStructure.GPIO_OType = GPIO_OType_PP;
 8000ed0:	f88d 400e 	strb.w	r4, [sp, #14]
	initStructure.GPIO_Speed = GPIO_Speed_100MHz;
	initStructure.GPIO_PuPd = PuPd;
 8000ed4:	f88d 400f 	strb.w	r4, [sp, #15]

void gpio(GPIO_TypeDef* GPIOx, uint32_t pin, GPIOMode_TypeDef mode, GPIOPuPd_TypeDef PuPd) {
	GPIO_InitTypeDef initStructure;
	
	initStructure.GPIO_Pin = pin;
	initStructure.GPIO_Mode = mode;
 8000ed8:	f88d 500c 	strb.w	r5, [sp, #12]
	initStructure.GPIO_OType = GPIO_OType_PP;
	initStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000edc:	f88d 600d 	strb.w	r6, [sp, #13]
	initStructure.GPIO_PuPd = PuPd;
	GPIO_Init(GPIOx, &initStructure);
 8000ee0:	f7ff fedc 	bl	8000c9c <GPIO_Init>
	
	initStructure.GPIO_Pin = pin;
	initStructure.GPIO_Mode = mode;
	initStructure.GPIO_OType = GPIO_OType_PP;
	initStructure.GPIO_Speed = GPIO_Speed_100MHz;
	initStructure.GPIO_PuPd = PuPd;
 8000ee4:	2302      	movs	r3, #2
	GPIO_Init(GPIOx, &initStructure);
 8000ee6:	a902      	add	r1, sp, #8
 8000ee8:	481b      	ldr	r0, [pc, #108]	; (8000f58 <main+0xd4>)
	
	initStructure.GPIO_Pin = pin;
	initStructure.GPIO_Mode = mode;
	initStructure.GPIO_OType = GPIO_OType_PP;
	initStructure.GPIO_Speed = GPIO_Speed_100MHz;
	initStructure.GPIO_PuPd = PuPd;
 8000eea:	f88d 300f 	strb.w	r3, [sp, #15]


void gpio(GPIO_TypeDef* GPIOx, uint32_t pin, GPIOMode_TypeDef mode, GPIOPuPd_TypeDef PuPd) {
	GPIO_InitTypeDef initStructure;
	
	initStructure.GPIO_Pin = pin;
 8000eee:	9502      	str	r5, [sp, #8]
	initStructure.GPIO_Mode = mode;
 8000ef0:	f88d 400c 	strb.w	r4, [sp, #12]
	initStructure.GPIO_OType = GPIO_OType_PP;
 8000ef4:	f88d 400e 	strb.w	r4, [sp, #14]
	initStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000ef8:	f88d 600d 	strb.w	r6, [sp, #13]
	initStructure.GPIO_PuPd = PuPd;
	GPIO_Init(GPIOx, &initStructure);
 8000efc:	f7ff fece 	bl	8000c9c <GPIO_Init>
		 OUTPUT, NOPULL);
	gpio(GPIOA, pin0,
		 INPUT, GPIO_PuPd_DOWN);
	
	
	GPIO_SetBits(GPIOD, pin14);
 8000f00:	4814      	ldr	r0, [pc, #80]	; (8000f54 <main+0xd0>)
 8000f02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f06:	f7ff ff53 	bl	8000db0 <GPIO_SetBits>
	
	
	// connect exti0 to gpioA. Since it is exti0 the interrupt will use pin0
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0 /*exti0*/ );
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	4621      	mov	r1, r4
 8000f0e:	f7ff ff8d 	bl	8000e2c <SYSCFG_EXTILineConfig>
	extiStructure.EXTI_Line = EXTI_Line0;
	extiStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	// set up when interrupt will trigger. Since we set up the button to pull down (gpioA pin0. pupd_down it is),
	// when button is not pressed it will be logic LOW. If we set trigger to rising then it will trigger when the
	// button is pressed, if we set it to falling then it will trigger after releasing the button
	extiStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000f12:	2308      	movs	r3, #8
	extiStructure.EXTI_LineCmd = ENABLE;
	
	EXTI_Init(&extiStructure);
 8000f14:	a802      	add	r0, sp, #8
	extiStructure.EXTI_Line = EXTI_Line0;
	extiStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	// set up when interrupt will trigger. Since we set up the button to pull down (gpioA pin0. pupd_down it is),
	// when button is not pressed it will be logic LOW. If we set trigger to rising then it will trigger when the
	// button is pressed, if we set it to falling then it will trigger after releasing the button
	extiStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000f16:	f88d 300d 	strb.w	r3, [sp, #13]
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0 /*exti0*/ );
	
	//Configure the exti0 line
	EXTI_InitTypeDef extiStructure;
	
	extiStructure.EXTI_Line = EXTI_Line0;
 8000f1a:	9502      	str	r5, [sp, #8]
	extiStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000f1c:	f88d 400c 	strb.w	r4, [sp, #12]
	// set up when interrupt will trigger. Since we set up the button to pull down (gpioA pin0. pupd_down it is),
	// when button is not pressed it will be logic LOW. If we set trigger to rising then it will trigger when the
	// button is pressed, if we set it to falling then it will trigger after releasing the button
	extiStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	extiStructure.EXTI_LineCmd = ENABLE;
 8000f20:	f88d 500e 	strb.w	r5, [sp, #14]
	
	EXTI_Init(&extiStructure);
 8000f24:	f7ff fd9e 	bl	8000a64 <EXTI_Init>
	
	// configure the nvic
	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = EXTI0_IRQn;	// interrupt for exti0
 8000f28:	2306      	movs	r3, #6
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
	nvicStructure.NVIC_IRQChannelSubPriority = 0x01;
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvicStructure);
 8000f2a:	a801      	add	r0, sp, #4
	EXTI_Init(&extiStructure);
	
	// configure the nvic
	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = EXTI0_IRQn;	// interrupt for exti0
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
 8000f2c:	f88d 5005 	strb.w	r5, [sp, #5]
	nvicStructure.NVIC_IRQChannelSubPriority = 0x01;
 8000f30:	f88d 5006 	strb.w	r5, [sp, #6]
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8000f34:	f88d 5007 	strb.w	r5, [sp, #7]
	
	EXTI_Init(&extiStructure);
	
	// configure the nvic
	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = EXTI0_IRQn;	// interrupt for exti0
 8000f38:	f88d 3004 	strb.w	r3, [sp, #4]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
	nvicStructure.NVIC_IRQChannelSubPriority = 0x01;
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvicStructure);
 8000f3c:	f7ff fa8a 	bl	8000454 <NVIC_Init>
 8000f40:	e7fe      	b.n	8000f40 <main+0xbc>
 8000f42:	bf00      	nop
 8000f44:	20000010 	.word	0x20000010
 8000f48:	431bde83 	.word	0x431bde83
 8000f4c:	e000e010 	.word	0xe000e010
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	40020c00 	.word	0x40020c00
 8000f58:	40020000 	.word	0x40020000
